#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "";             // Cambiar por tu red Wi-Fi
const char* password = " ";     // Cambiar por tu contraseña
const String servidor = "";



// Pines de sensores
const int sensor1Pin = 12; // Nivel alto
const int sensor2Pin = 14; // Nivel medio
const int sensor3Pin = 27; // Nivel bajo

// Pines de salida
const int buzzerPin = 26;
const int led1Pin = 25;
const int led2Pin = 33;
const int led3Pin = 32;
const int relePin = 4;

bool motorEncendido = false;
bool buzzerActivo = false;
unsigned long buzzerStartTime = 0;
bool buzzerAltoDisparado = false;
bool buzzerBajoDisparado = false;

int prev_nivelAlto, prev_nivelMedio, prev_nivelBajo, prev_motor;

// ================================
void setup() {
  Serial.begin(115200);

  pinMode(sensor1Pin, INPUT);
  pinMode(sensor2Pin, INPUT);
  pinMode(sensor3Pin, INPUT);

  pinMode(buzzerPin, OUTPUT);
  pinMode(led1Pin, OUTPUT);
  pinMode(led2Pin, OUTPUT);
  pinMode(led3Pin, OUTPUT);
  pinMode(relePin, OUTPUT);

  digitalWrite(relePin, HIGH); // Motor apagado por defecto

  WiFi.begin(ssid, password);
  Serial.print("Conectando al WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado");
}

// ================================
void loop() {
  int nivelAlto = digitalRead(sensor1Pin);
  int nivelMedio = digitalRead(sensor2Pin);
  int nivelBajo = digitalRead(sensor3Pin);

  // Actualizar LEDs
  digitalWrite(led1Pin, nivelAlto);
  digitalWrite(led2Pin, nivelMedio);
  digitalWrite(led3Pin, nivelBajo);

  // Buzzer por nivel bajo
  if (nivelBajo == LOW && !buzzerBajoDisparado) {
    tone(buzzerPin, 2000);
    buzzerStartTime = millis();
    buzzerActivo = true;
    buzzerBajoDisparado = true;
    Serial.println("Nivel BAJO: Buzzer activado");
  }

  // Buzzer por tanque lleno
  if (nivelAlto == HIGH && !buzzerAltoDisparado) {
    tone(buzzerPin, 1500);
    buzzerStartTime = millis();
    buzzerActivo = true;
    buzzerAltoDisparado = true;
    Serial.println("Nivel ALTO: Buzzer activado");
  }

  // Apagar buzzer luego de 30s
  if (buzzerActivo && millis() - buzzerStartTime >= 30000) {
    noTone(buzzerPin);
    buzzerActivo = false;
  }

  if (nivelBajo == HIGH) buzzerBajoDisparado = false;
  if (nivelAlto == LOW) buzzerAltoDisparado = false;

  // Control automático del motor
  if (!motorEncendido && nivelBajo == LOW) {
    digitalWrite(relePin, LOW); // Encender motor
    motorEncendido = true;
    Serial.println("Motor ENCENDIDO");
  }

  if (motorEncendido && nivelAlto == HIGH) {
    digitalWrite(relePin, HIGH); // Apagar motor
    motorEncendido = false;
    Serial.println("Motor APAGADO");
  }

  // Solo enviar datos si hubo cambio
  if (nivelAlto != prev_nivelAlto || nivelMedio != prev_nivelMedio || nivelBajo != prev_nivelBajo || motorEncendido != prev_motor) {
    enviarDatos(nivelAlto, nivelMedio, nivelBajo, motorEncendido ? 1 : 0);
    prev_nivelAlto = nivelAlto;
    prev_nivelMedio = nivelMedio;
    prev_nivelBajo = nivelBajo;
    prev_motor = motorEncendido;
  }

  delay(500);
}

// ================================
void enviarDatos(int alto, int medio, int bajo, int motor) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = servidor + "?nivel_alto=" + alto + "&nivel_medio=" + medio + "&nivel_bajo=" + bajo + "&estado_motor=" + motor;

    http.begin(url);
    int httpCode = http.GET();
    if (httpCode > 0) {
      String respuesta = http.getString();
      Serial.println("Servidor: " + respuesta);
    } else {
      Serial.println("Error al enviar datos");
    }
    http.end();
  }
}

